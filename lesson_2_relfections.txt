What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository, git creates a new git repository in the directory in which you
use the "git init" command.

You need to initialize a git repository in a directory on your machine if you wish to use version
control to manage your work.

How is the staging area different from the working directory and the repository? What value do you 
think it offers?

The staging area is a kind of space between the working directory and repository. It allows you
to visualize what changes you are about to commit to the repository.

How can you use the staging area to make sure you have one commit per logical change?

The staging area allows you to review the changes you have made to one or more of your files before
committing them using the "git diff" and "git diff --staged" commands. This way, if you find out
that you have made several logical changes instead of one since the last commit, you can add the
files to the staging area one at a time to avoid making a large commit.

What are some situations when branches would be helpful in keeping your history organized? How 
would branches help?

Branches can be useful when you want to add an experimental feature to your project or extend it
to support multiple languages.

In case of an experimental feature, you can add a new branch for that feature and keep all of your
new data safe on the new branch. Similarly, for supporting multiple languages, you can make
separate branches from your existing branch and make the neccessary chnanges on the new branches.

How do the diagrams help you visualize the branch structure?

The diagrams of the commit history help you to see how the commit history on one branch proceeds
and how it goes into multiple directions as you introduce more branches. It also helps you 
understand the concept of commit parents and how a commit made on a previously added commit can
cause your commit to be lost when you return to one of your branches.





